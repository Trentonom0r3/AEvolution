// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define REGISTER_COMMAND(ID, TYPE) static bool _reg_##TYPE = []() -> bool { CommandFactory::get().registerCommand(ID, [](Command cmd) -> std::unique_ptr<CommandBase> { auto command = std::make_unique<TYPE>(std::move(cmd)); return command; }); return true; }();
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define REGISTER_COMMAND(ID, TYPE) static bool _reg_##TYPE = []() -> bool { CommandFactory::get().registerCommand(ID, [](Command cmd) -> std::unique_ptr<CommandBase> { auto command = std::make_unique<TYPE>(std::move(cmd)); return command; }); return true; }();
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define REGISTER_COMMAND(ID, TYPE) static bool _reg_##TYPE = []() -> bool { CommandFactory::get().registerCommand(ID, [](Command cmd) -> std::unique_ptr<CommandBase> { auto command = std::make_unique<TYPE>(std::move(cmd)); return command; }); return true; }();
